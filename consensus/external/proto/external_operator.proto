syntax="proto3";

package v1;

option go_package = "/consensus/external/proto";


// MessageType defines the types of messages
// circulating in the system
enum MessageType {
  SENDBLOCK= 0;
  VERSION = 1;
  ADDR = 2;
  GETADDR = 3;
  GETBLOCKS = 4;
}

message View {
  // height represents the number of the last block
  uint64 height = 1;

  // lasthash represents the hash of the last block
  bytes lasthash = 1;
}

// Message defines the base message structure
message Message {
  // view is the current view for the message
  View view = 1;

  // from defines who is the message sender
  bytes from = 2;

  // the signature of the sender, if any
  bytes signature = 3;

  // type defines the message type
  MessageType type = 4;

  // payload is the specific message payload
  oneof payload {
    PrePrepareMessage preprepareData = 5;
    PrepareMessage prepareData = 6;
    CommitMessage commitData = 7;
    RoundChangeMessage roundChangeData = 8;
  }
}

// PrePrepareMessage is the message for the PREPREPARE phase
message PrePrepareMessage {
  // proposal is the actual data being proposed for consensus
  bytes proposal = 1;

  // proposalHash is the Keccak hash of the proposal
  bytes proposalHash = 2;

  // certificate is the RCC that can accompany
  // a proposal message
  RoundChangeCertificate certificate = 3;
}

// PrepareMessage is the message for the PREPARE phase
message PrepareMessage {
  // proposalHash is the Keccak hash of the proposal
  bytes proposalHash = 1;
}

// CommitMessage is the message for the COMMIT phase
message CommitMessage {
  // proposalHash is the Keccak hash of the proposal
  bytes proposalHash = 1;

  // committedSeal is the seal of the sender
  bytes committedSeal = 2;
}
